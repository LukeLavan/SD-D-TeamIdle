{"version":3,"sources":["PersistentState.tsx","App.tsx","index.tsx"],"names":["usePersistentState","key","defaultValue","useState","PersistentValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","App","variableDefaults","honey","setHoney","bees","setBees","costOfNextBee","setCostOfNextBee","processTick","timer","setInterval","clearInterval","className","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAOA,SAASA,EACPC,EACAC,GAGA,MAA0BC,oBAAS,WACjC,IAAMC,EAAkBC,OAAOC,aAAaC,QAAQN,GACpD,OAA2B,OAApBG,EACHI,KAAKC,MAAML,GACXF,KAJN,mBAAOQ,EAAP,KAAcC,EAAd,KAUA,OAHAC,qBAAU,WACRP,OAAOC,aAAaO,QAAQZ,EAAKO,KAAKM,UAAUJ,MAC/C,CAACT,EAAKS,IACF,CAACA,EAAOC,G,iBC0DFI,MA5Ef,WACE,IAAMC,EACG,EADHA,EAEE,EAFFA,EAGW,EAIjB,EAA0BhB,EAAmB,QAASgB,GAAtD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBlB,EAAmB,OAAQgB,GAAnD,mBAAOG,EAAP,KAAaC,EAAb,KAGA,EAA0CjB,mBACxCa,GADF,mBAAOK,EAAP,KAAsBC,EAAtB,KAqBAV,qBAAU,WAJRU,EAAiB,KAAD,IAAEH,EAAO,EAAM,MAM9B,CAACA,IAGJ,IAAMI,EAAc,WAClBL,EAASD,EAAQE,IAenB,OAXAP,qBAAU,WACR,IAAMY,EAAQC,YAAYF,EAAa,KACvC,OAAO,kBAAMG,cAAcF,OAU3B,sBAAKG,UAAU,MAAf,UACE,0CACA,wCACUV,EADV,IACiB,uBACf,wBAAQW,QA1CS,WACrBV,EAASD,EAAQ,IAyCb,+BAEF,uCACSE,EADT,IACe,uBACb,wBAAQU,SAAUZ,EAAQI,EAAeO,QA1CzB,WAChBX,GAASI,IACXD,EAAQD,EAAO,GACfD,EAASD,EAAQI,KAuCf,yBAGA,uBALF,qBAMqBA,EANrB,IAMoC,0BAEpC,4BACE,wBAAQO,QArBA,WACZV,EAASF,GACTI,EAAQJ,IAmBJ,yBCrERc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.41a0fd52.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n/** A wrapper for the useState React hook that checks window.localStorage for a stored value first.\n * @param key The key to check window.localStorage for any stored value\n * @param defaultValue The value to default to if no stored value is found (identical to the normal argument of useState)\n * @returns the same type that useState returns: an array containing the reference to the variable and its mutator function\n */\nfunction usePersistentState<DefaultValueType>(\n  key: string,\n  defaultValue: DefaultValueType\n): [DefaultValueType, React.Dispatch<React.SetStateAction<DefaultValueType>>] {\n  // attempt to grab value from localStorage\n  const [value, setValue] = useState(() => {\n    const PersistentValue = window.localStorage.getItem(key); // TODO: throttle calls?\n    return PersistentValue !== null\n      ? JSON.parse(PersistentValue)\n      : defaultValue;\n  });\n  // ensure that local storage is updated to reflect any changes\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n\nexport { usePersistentState };\n","import { usePersistentState } from './PersistentState';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App(): JSX.Element {\n  const variableDefaults = {\n    honey: 0,\n    bees: 0,\n    costOfNextBee: 1\n  };\n\n  // persistent variables\n  const [honey, setHoney] = usePersistentState('honey', variableDefaults.honey);\n  const [bees, setBees] = usePersistentState('bees', variableDefaults.bees);\n\n  // non-persistent varaibles (can be recalculated on page load)\n  const [costOfNextBee, setCostOfNextBee] = useState(\n    variableDefaults.costOfNextBee\n  );\n\n  // mutators\n  const incrementHoney = () => {\n    setHoney(honey + 1);\n  };\n\n  const incrementBees = () => {\n    if (honey >= costOfNextBee) {\n      setBees(bees + 1);\n      setHoney(honey - costOfNextBee);\n    }\n  };\n\n  const calcCostOfNextBee = () => {\n    setCostOfNextBee((bees + 1) ** 2);\n  };\n\n  // calculate new bee cost when bee count updates\n  useEffect(() => {\n    calcCostOfNextBee();\n  }, [bees]);\n\n  // handle the logic for one tick\n  const processTick = () => {\n    setHoney(honey + bees);\n  };\n\n  // process a tick every 1 second\n  useEffect(() => {\n    const timer = setInterval(processTick, 1000);\n    return () => clearInterval(timer);\n  });\n\n  // reset the state and clear local storage\n  const reset = () => {\n    setHoney(variableDefaults.honey);\n    setBees(variableDefaults.bees);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>bee game</h1>\n      <p>\n        Honey: {honey} <br />\n        <button onClick={incrementHoney}>buzz buzz buzz</button>\n      </p>\n      <p>\n        bees: {bees} <br />\n        <button disabled={honey < costOfNextBee} onClick={incrementBees}>\n          gain a bee!\n        </button>\n        <br />\n        cost of next bee: {costOfNextBee} <br />\n      </p>\n      <p>\n        <button onClick={reset}>reset</button>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}